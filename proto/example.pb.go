// Code generated by protoc-gen-go. DO NOT EDIT.
// source: example.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 分钟数据
type MinData struct {
	// 偏移量
	Offset uint32 `protobuf:"varint,1,opt,name=Offset,proto3" json:"Offset,omitempty"`
	// 时间(HHMM)
	Moment uint32 `protobuf:"varint,2,opt,name=Moment,proto3" json:"Moment,omitempty"`
	// 价格 单位：元
	Price float32 `protobuf:"fixed32,3,opt,name=Price,proto3" json:"Price,omitempty"`
	// 均价
	AvePrice float32 `protobuf:"fixed32,4,opt,name=Ave_price,json=AvePrice,proto3" json:"Ave_price,omitempty"`
	// 成交量
	Volume float64 `protobuf:"fixed64,5,opt,name=Volume,proto3" json:"Volume,omitempty"`
	// 开盘
	Open float32 `protobuf:"fixed32,6,opt,name=Open,proto3" json:"Open,omitempty"`
	// 最高
	High float32 `protobuf:"fixed32,7,opt,name=High,proto3" json:"High,omitempty"`
	// 最低
	Low float32 `protobuf:"fixed32,8,opt,name=Low,proto3" json:"Low,omitempty"`
	// 收盘
	Close float32 `protobuf:"fixed32,9,opt,name=Close,proto3" json:"Close,omitempty"`
	// 是否保存
	IsWrite              int32    `protobuf:"varint,10,opt,name=IsWrite,proto3" json:"IsWrite,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MinData) Reset()         { *m = MinData{} }
func (m *MinData) String() string { return proto.CompactTextString(m) }
func (*MinData) ProtoMessage()    {}
func (*MinData) Descriptor() ([]byte, []int) {
	return fileDescriptor_example_7d46bced2f47828e, []int{0}
}
func (m *MinData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MinData.Unmarshal(m, b)
}
func (m *MinData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MinData.Marshal(b, m, deterministic)
}
func (dst *MinData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MinData.Merge(dst, src)
}
func (m *MinData) XXX_Size() int {
	return xxx_messageInfo_MinData.Size(m)
}
func (m *MinData) XXX_DiscardUnknown() {
	xxx_messageInfo_MinData.DiscardUnknown(m)
}

var xxx_messageInfo_MinData proto.InternalMessageInfo

func (m *MinData) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *MinData) GetMoment() uint32 {
	if m != nil {
		return m.Moment
	}
	return 0
}

func (m *MinData) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *MinData) GetAvePrice() float32 {
	if m != nil {
		return m.AvePrice
	}
	return 0
}

func (m *MinData) GetVolume() float64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *MinData) GetOpen() float32 {
	if m != nil {
		return m.Open
	}
	return 0
}

func (m *MinData) GetHigh() float32 {
	if m != nil {
		return m.High
	}
	return 0
}

func (m *MinData) GetLow() float32 {
	if m != nil {
		return m.Low
	}
	return 0
}

func (m *MinData) GetClose() float32 {
	if m != nil {
		return m.Close
	}
	return 0
}

func (m *MinData) GetIsWrite() int32 {
	if m != nil {
		return m.IsWrite
	}
	return 0
}

func init() {
	proto.RegisterType((*MinData)(nil), "pb.MinData")
}

func init() { proto.RegisterFile("example.proto", fileDescriptor_example_7d46bced2f47828e) }

var fileDescriptor_example_7d46bced2f47828e = []byte{
	// 214 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x8f, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0x49, 0x77, 0x9b, 0xee, 0x0e, 0x2c, 0xc8, 0x20, 0xcb, 0x80, 0x97, 0xe0, 0x29, 0x27,
	0x2f, 0x3e, 0xc1, 0xa2, 0x07, 0x05, 0x97, 0x4a, 0x0e, 0x7a, 0x94, 0x56, 0xa6, 0x1a, 0x68, 0x9b,
	0xd0, 0xc6, 0xea, 0x53, 0xfb, 0x0c, 0x92, 0xa4, 0xde, 0xfe, 0xef, 0xfb, 0xe7, 0xf0, 0x0f, 0x1c,
	0xf8, 0xa7, 0x19, 0x7c, 0xcf, 0x37, 0x7e, 0x72, 0xc1, 0x61, 0xe1, 0xdb, 0xeb, 0x5f, 0x01, 0xd5,
	0xd9, 0x8e, 0xf7, 0x4d, 0x68, 0xf0, 0x08, 0xb2, 0xee, 0xba, 0x99, 0x03, 0x09, 0x25, 0xf4, 0xc1,
	0xac, 0x14, 0xfd, 0xd9, 0x0d, 0x3c, 0x06, 0x2a, 0xb2, 0xcf, 0x84, 0x97, 0x50, 0x3e, 0x4f, 0xf6,
	0x9d, 0x69, 0xa3, 0x84, 0x2e, 0x4c, 0x06, 0xbc, 0x82, 0xfd, 0x69, 0xe1, 0x37, 0x9f, 0x9a, 0x6d,
	0x6a, 0x76, 0xa7, 0x85, 0x73, 0x79, 0x04, 0xf9, 0xe2, 0xfa, 0xaf, 0x81, 0xa9, 0x54, 0x42, 0x0b,
	0xb3, 0x12, 0x22, 0x6c, 0x6b, 0xcf, 0x23, 0xc9, 0x74, 0x9f, 0x72, 0x74, 0x0f, 0xf6, 0xe3, 0x93,
	0xaa, 0xec, 0x62, 0xc6, 0x0b, 0xd8, 0x3c, 0xb9, 0x6f, 0xda, 0x25, 0x15, 0x63, 0x1c, 0x71, 0xd7,
	0xbb, 0x99, 0x69, 0x9f, 0x47, 0x24, 0x40, 0x82, 0xea, 0x71, 0x7e, 0x9d, 0x6c, 0x60, 0x02, 0x25,
	0x74, 0x69, 0xfe, 0xb1, 0x95, 0xe9, 0xf7, 0xdb, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe3, 0xc1,
	0x77, 0x02, 0x0c, 0x01, 0x00, 0x00,
}
